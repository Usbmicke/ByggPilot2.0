\nimport { z } from \'zod\';\nimport { createTool } from \'ai\';\nimport { dal } from \'@/lib/dal\';\nimport { logger } from \'@/lib/logger\';\n\n// =================================================================================\n// AI VERKTYGSDEFINITIONER V1.0 - Blueprint \"Sektion 2.1\" & \"Tabell 2\"\n// =================================================================================\n// Denna fil definierar de \"verktyg\" som AI-modellen (Large Action Model) får använda.\n// Varje verktyg har ett strikt Zod-schema för indata och en exekveringsfunktion\n// som anropar vår säkra Data Access Layer (DAL).\n\nexport const aiTools = {\n  /**\n   * Verktyg för att skapa ett nytt projekt.\n   */\n  createProject: createTool({\n    description: \'Använd detta verktyg för att skapa ett nytt byggprojekt. Fråga alltid efter kundens namn om det inte anges.\',\n    parameters: z.object({\n      projectName: z.string().describe(\'Projektets unika och beskrivande namn, t.ex. \"Renovering Alphyddan\".\'),\n      clientName: z.string().describe(\'Namnet på kunden som beställt projektet, t.ex. \"Brf Alphyddan\".\')\n    }),\n    execute: async ({ projectName, clientName }) => {\n      try {\n        logger.info(`[AI Tool:createProject] Attempting to create project: ${projectName}`);\n        const projectId = await dal.projects.create({ projectName, clientName });\n        logger.info(`[AI Tool:createProject] Successfully created project with ID: ${projectId}`);\n        return { success: true, projectId, message: `Projektet \'${projectName}\' har skapats.` };\n      } catch (error) {\n        logger.error(\'[AI Tool:createProject] Failed to execute\', { error });\n        return { success: false, message: \'Kunde inte skapa projektet på grund av ett internt fel.\' };\n      }\n    }\n  }),\n\n  /**\n   * Verktyg för att lista aktiva projekt.\n   */\n  listProjects: createTool({\n    description: \'Använd detta verktyg för att lista alla nuvarande aktiva projekt.\',\n    parameters: z.object({}), // Inga parametrar behövs\n    execute: async () => {\n      try {\n        logger.info(\'[AI Tool:listProjects] Attempting to list active projects.\');\n        const projects = await dal.projects.getActive();\n        if (projects.length === 0) {\n          return { success: true, message: \'Det finns för närvarande inga aktiva projekt.\' };\n        }\n        // Formatera svaret så att AI:n lätt kan presentera det\n        const projectList = projects.map(p => `   - ${p.projectName} (Status: ${p.status})`).join('\n');\n        return { success: true, message: `Här är en lista över aktiva projekt:\n${projectList}` };\n      } catch (error) {\n        logger.error(\'[AI Tool:listProjects] Failed to execute\', { error });\n        return { success: false, message: \'Kunde inte hämta projektlistan på grund av ett internt fel.\' };\n      }\n    }\n  }),\n\n  // Fler verktyg (createCustomer, generateQuotePdf, etc.) kommer att läggas till här...\n};\n