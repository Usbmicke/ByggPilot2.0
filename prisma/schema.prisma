// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Explicitly defining the binary target to match the deployment environment's OpenSSL version.
  // This prevents Prisma from failing to load its query engine due to system library mismatches.
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NextAuth Models ---

// The User model is based on your application's usage in `findOrCreateUser`.
// It stores core user information.
model User {
  id                 String    @id @unique
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  onboardingComplete Boolean   @default(false)
  accounts           Account[]
  sessions           Session[]
}

// The Account model stores provider information (e.g., Google) for a user.
// This is crucial for linking external accounts to your User model.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// The Session model is used by NextAuth to manage user sessions.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// The VerificationToken is used for email verification flows.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
